import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import fetchPosts from './postAPI';

export interface PostState {
  id: number;
  title: string;
  content: string;
  author_id: string;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: PostState = {
  id: NaN,
  title: '',
  content: '',
  author_id: '',
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const blogsFetch = createAsyncThunk('post/fetchPost', async () => {
  const response = await fetchPosts();
  // The value we return becomes the `fulfilled` action payload
  return response.data;
});

export const postSlice = createSlice({
  name: 'post',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateContent: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.content += 'This is new updated Content!';
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(blogsFetch.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(blogsFetch.fulfilled, (state, action) => {
        state.status = 'idle';
        state += action.payload;
      })
      .addCase(blogsFetch.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { updateContent } = postSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectId = (state: RootState) => state.post.id;

export default postSlice.reducer;
